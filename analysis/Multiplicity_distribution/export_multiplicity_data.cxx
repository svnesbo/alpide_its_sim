/**
 * @file   export_multiplicity_data.cxx
 * @Author Simon Voigt Nesbo
 * @date   December 30, 2016
 * @brief  This ROOT macro generates a discrete multiplicity distribution to be
 *         used by the Alpide SystemC simulation model.
 *         The macro uses the HEPData-ins877822-v1-root.root file as its input:
 *         http://hepdata.cedar.ac.uk/view/ins877822/d5
 *         (From the paper "Elliptic Flow of Charged Particles in Pb-Pb Collisions 
 *         at sqrt(sNN) = 2.76 TeV", K. Aamodt 2010). 
 *         
 *         The macro imports the data from figure 1 in the picture 
 *         (Table 5/Graph1D_y1 in .root file), and exports it to a simple text file
 *         with the following format:
 *         X0 Y0
 *         X1 Y1
 *         ...
 *
 *         Each line is one X-value and one Y-value (probability). The macro accounts for
 *         the bin width of 5 in the data, and spreads each bin over 5 values (because
 *         the simulation model expects one probability value for each index value).
 * 
 *         To run the macro:
 *         root export_multiplicity_data.cxx
 *
 * Detailed description of file.
 */
#include <TFile.h>
#include <TCanvas.h>
#include <TGraph.h>
#include <TF1.h>
#include <iostream>
#include <fstream>


//@brief Based on h12ascii from this forum post:
//       https://root.cern.ch/phpBB3/viewtopic.php?t=14452
//@parameter g Pointer to TGraph with data/bins to export
//@parameter bin_width Width of bins in the data file.
//@parameter filename File to save data to
void export_raw_bins_data(TGraph* g, unsigned int bin_width, const char *filename)
{
  Int_t n = g->GetN();
  Double_t x, y, sum;
  ofstream out_file(filename);

  if(out_file.is_open() == false) {
    std::cerr << "Error opening file." << std::endl;
    return;
  }

  sum = 0;

  for (int i=0; i<n; i++) {
    g->GetPoint(i, x, y);

    for(int j = 0; j < bin_width; j++) {
      out_file << x-(bin_width/2.0)+j << " " << y/bin_width << std::endl;
      //std::cout << x-(bin_width/2.0)+j << " " << y << std::endl;
      sum += y;
    }
  }
  out_file.close();
  
  std::cout << std::endl << "Sum (probabilities): " << sum << std::endl;
}


//@parameter f Pointer to TF1 function to use to generate values for the distribution to
//             write to file. The ranges specified for the TF1 object will be used as
//             function ranges.
//@parameter filename File to save data to
void export_fit_data(TF1* func, const char *filename)
{
  Double_t y;
  Double_t xmin, xmax;
  ofstream out_file(filename);

  if(out_file.is_open() == false) {
    std::cerr << "Error opening file." << std::endl;
    return;
  }


  // Get function range
  func->GetRange(xmin, xmax);
  
  for (int x = xmin; x < xmax; x++) {
    y = func->Eval(x);

    // We don't want negative probabilities...
    if(y < 0)
      y = 0;
    
    std::cout << x << " " << y << std::endl;      
    out_file << x << " " << y << std::endl;
  }
  out_file.close();
}


//@brief Export multiplicity distributions to text files used by Alpide SystemC simulation.
//       See description in header for more details.
void export_multiplicity_data(void)
{
  TCanvas* c1 = new TCanvas;  
  TFile HEPData("HEPData-ins877822-v1-root.root");
  TGraph* g5;

  HEPData.GetObject("Table 5/Graph1D_y1", g5);

  // Plot the data we're using
  g5->Draw();
  c1->SetLogy(1);

  // Export the raw multiplicity data to file (but take the bin width of 5 into account).
  export_raw_bins_data(g5, 5, "multipl_dist_raw_bins.txt");



  // Some of the multiplicity bins have 0 probability in the data. With the raw/discrete output above, the random
  // data generated by the simulation will not include those multiplicities. Perhaps that is unrealistic?
  // This is an attempt to fit a function to the data, so that we can calculate some values that also includes those
  // missing bins..
  TF1  *f1 = new TF1("f1","[0] - [1]*log10(1e-12+x) + [2]*log10(1+(x/[3])) - [4]*exp((x/[5])^[6])*log10(1e-12+x/[7])",0,3000);
  f1->SetParameters(0.025,0.021,0.0209,15,0.000012,1500,2.3,950);
  //f1->SetParameters(0.0238725, 0.0242197, 0.02552, 15.6814, 0.00134309, 1663.6, 0.367265, 8089.15);

  g5->Fit("f1");


  // Export multiplicity data for function fit
  export_fit_data(f1, "multipl_dist_fit.txt");
  
  //f7->Draw("SAME");  
}
