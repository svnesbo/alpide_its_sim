/**
 * @file   Stimuli.cpp
 * @author Simon Voigt Nesbo
 * @date   December 12, 2016
 * @brief  Source file for stimuli function for Alpide Dataflow SystemC model
 */

#include "Stimuli.hpp"
#include "../ITS/ITSSimulationStats.hpp"

// Ignore warnings about use of auto_ptr in SystemC library
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#include <systemc.h>
#pragma GCC diagnostic pop

#include <list>
#include <sstream>
#include <fstream>

extern volatile bool g_terminate_program;


SC_HAS_PROCESS(Stimuli);
///@brief Constructor for stimuli class.
///       Instantiates and initializes the EventGenerator and Alpide objects,
///       connects the SystemC ports
///@param[in] name SystemC module name
///@param[in] settings QSettings object with simulation settings.
///@param[in] output_path Path to store output files generated by the Stimuli class
Stimuli::Stimuli(sc_core::sc_module_name name, QSettings* settings, std::string output_path)
  : sc_core::sc_module(name)
{
  mOutputPath = output_path;

  // Initialize variables for Stimuli object
  mNumEvents = settings->value("simulation/n_events").toInt();
  mSingleChipSimulation = settings->value("simulation/single_chip").toBool();
  mContinuousMode = settings->value("simulation/continuous_mode").toBool();
  mStrobeActiveNs = settings->value("event/strobe_active_length_ns").toInt();
  mStrobeInactiveNs = settings->value("event/strobe_inactive_length_ns").toInt();
  mTriggerDelayNs = settings->value("event/trigger_delay_ns").toInt();

  unsigned int trigger_filter_time = settings->value("event/trigger_filter_time_ns").toInt();
  int region_fifo_size = settings->value("alpide/region_fifo_size").toInt();
  int dmu_fifo_size = settings->value("alpide/dmu_fifo_size").toInt();
  int dtu_delay = settings->value("alpide/dtu_delay").toInt();
  bool enable_clustering = settings->value("alpide/clustering_enable").toBool();
  bool matrix_readout_speed = settings->value("alpide/matrix_readout_speed_fast").toBool();
  bool strobe_extension = settings->value("alpide/strobe_extension_enable").toBool();

  mEventGen = new EventGenerator("event_gen", settings, mOutputPath);

  if(mSingleChipSimulation) {
    mAlpide = new ITS::SingleChip("SingleChip",
                                  0,
                                  region_fifo_size,
                                  dmu_fifo_size,
                                  dtu_delay,
                                  mStrobeActiveNs,
                                  strobe_extension,
                                  enable_clustering,
                                  mContinuousMode,
                                  matrix_readout_speed);

    mAlpide->s_system_clk_in(clock);

    mReadoutUnit = new ReadoutUnit("RU",
                                   0,
                                   0,
                                   1,
                                   1,
                                   trigger_filter_time,
                                   true);

    mReadoutUnit->s_busy_in(mReadoutUnit->s_busy_out);
    mReadoutUnit->s_system_clk_in(clock);
    mReadoutUnit->s_serial_data_input[0](mAlpide->s_alpide_data_out_exp);
    mReadoutUnit->s_alpide_control_output[0].bind(mAlpide->socket_control_in[0]);
    mAlpide->socket_data_out[0].bind(mReadoutUnit->s_alpide_data_input[0]);
  }
  else { // ITS Detector Simulation
    ITS::detectorConfig config;
    config.layer[0].num_staves = settings->value("its/layer0_num_staves").toInt();
    config.layer[1].num_staves = settings->value("its/layer1_num_staves").toInt();
    config.layer[2].num_staves = settings->value("its/layer2_num_staves").toInt();
    config.layer[3].num_staves = settings->value("its/layer3_num_staves").toInt();
    config.layer[4].num_staves = settings->value("its/layer4_num_staves").toInt();
    config.layer[5].num_staves = settings->value("its/layer5_num_staves").toInt();
    config.layer[6].num_staves = settings->value("its/layer6_num_staves").toInt();

    mITS = new ITS::ITSDetector("ITS", config, trigger_filter_time);
    mITS->s_system_clk_in(clock);
    mITS->s_detector_busy_out(s_its_busy);
  }

  s_physics_event = false;

  SC_METHOD(stimuliMainMethod);
  sensitive << mEventGen->E_physics_event;
  dont_initialize();


  // This method just generates a (VCD traceable) SystemC signal
  // that coincides with the physics event from the event generator
  SC_METHOD(physicsEventSignalMethod);
  sensitive << mEventGen->E_physics_event;
  dont_initialize();
}


///@brief Main control of simulation stimuli
void Stimuli::stimuliMainMethod(void)
{
  if(simulation_done == true || g_terminate_program == true) {
    sc_core::sc_stop();

    writeStimuliInfo();

    if(mSingleChipSimulation)
      writeAlpideStatsToFile(mOutputPath, mAlpide->getChips());
    else
      mITS->writeSimulationStats(mOutputPath);
  }
  else if(mEventGen->getPhysicsEventCount() < mNumEvents) {
    //if((mEventGen->getPhysicsEventCount() % 100) == 0) {
    int64_t time_now = sc_time_stamp().value();
    std::cout << "@ " << time_now << " ns: \tPhysics event number ";
    std::cout << mEventGen->getPhysicsEventCount() << std::endl;
    //}


    std::cout << "Feeding " << mEventGen->getLatestPhysicsEvent().size() << " pixels to ITS detector." << std::endl;
    // Get hits for this event, and "feed" them to the ITS detector
    auto event_hits = mEventGen->getLatestPhysicsEvent();

    if(mSingleChipSimulation) {
      for(auto it = event_hits.begin(); it != event_hits.end(); it++)
        mAlpide->pixelInput(*it);

      std::cout << "Creating event for next trigger.." << std::endl;

      // Create an event for the next trigger, delayed by the
      // total/specified trigger delay (to account for cable/CTP delays etc.)
      mReadoutUnit->E_trigger_in.notify(mTriggerDelayNs, SC_NS);
    }
    else {
      for(auto it = event_hits.begin(); it != event_hits.end(); it++)
        mITS->pixelInput(*it);

      std::cout << "Creating event for next trigger.." << std::endl;

      // Create an event for the next trigger, delayed by the
      // total/specified trigger delay (to account for cable/CTP delays etc.)
      mITS->E_trigger_in.notify(mTriggerDelayNs, SC_NS);
    }

    next_trigger(mEventGen->E_physics_event);
  }
  else {
    // After all strobes have been generated, or upon CTRL+C, allow simulation
    // to run for another X us to allow readout of data remaining in MEBs, FIFOs etc.
    next_trigger(10, SC_US);
    simulation_done = true;
  }
}


///@brief This SystemC method just toggles the s_physics_event for a clock cycle
///       signal every time we get an E_physics_event from the event generator,
///       so that we can have a signal for this that we can add to the trace file.
void Stimuli::physicsEventSignalMethod(void)
{
  if(s_physics_event.read() == true) {
    s_physics_event.write(false);
    next_trigger(mEventGen->E_physics_event);
  } else {
    s_physics_event.write(true);
    next_trigger(25,SC_NS);
  }
}


///@brief Add SystemC signals to log in VCD trace file.
///@param[in,out] wf VCD waveform file pointer
void Stimuli::addTraces(sc_trace_file *wf) const
{
  sc_trace(wf, s_physics_event, "PHYSICS_EVENT");

  sc_trace(wf, s_its_busy, "its_busy");
  sc_trace(wf, s_alpide_data_line, "alpide_data_line");

  if(mSingleChipSimulation) {
    //mReadoutUnit->addTraces(wf, "");
    mAlpide->addTraces(wf, "");
  } else {
    mITS->addTraces(wf, "");
  }
}


void Stimuli::writeStimuliInfo(void) const
{
  std::string info_filename = mOutputPath + std::string("/simulation_info.txt");
  ofstream info_file(info_filename);

  if(!info_file.is_open()) {
    std::cerr << "Error opening simulation info file: " << info_filename << std::endl;
    return;
  }

  info_file << "Number of physics events requested: " << mNumEvents << std::endl;

  info_file << "Number of physics events simulated: ";
  info_file << mEventGen->getPhysicsEventCount() << std::endl;
}
